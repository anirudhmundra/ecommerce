// Code generated by MockGen. DO NOT EDIT.
// Source: items.go

// Package mocks is a generated GoMock package.
package mocks

import (
	response "bcg/ecommerce/api/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemsService is a mock of ItemsService interface.
type MockItemsService struct {
	ctrl     *gomock.Controller
	recorder *MockItemsServiceMockRecorder
}

// MockItemsServiceMockRecorder is the mock recorder for MockItemsService.
type MockItemsServiceMockRecorder struct {
	mock *MockItemsService
}

// NewMockItemsService creates a new mock instance.
func NewMockItemsService(ctrl *gomock.Controller) *MockItemsService {
	mock := &MockItemsService{ctrl: ctrl}
	mock.recorder = &MockItemsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsService) EXPECT() *MockItemsServiceMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockItemsService) Checkout(ids []string) response.Checkout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", ids)
	ret0, _ := ret[0].(response.Checkout)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockItemsServiceMockRecorder) Checkout(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockItemsService)(nil).Checkout), ids)
}

// Validate mocks base method.
func (m *MockItemsService) Validate(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockItemsServiceMockRecorder) Validate(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockItemsService)(nil).Validate), ids)
}
